const express = require("express");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const path = require("path");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
//
const dbPath = path.join(__dirname, "twitterClone.db");
//
const app = express();
//
app.use(express.json());
let db = null;
//
const initializeAndDbServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("Server is started at http://localhost:3000/");
    });
  } catch (error) {
    console.log(`DB error ${error.message}`);
    process.exit(1);
  }
};
initializeAndDbServer();
//authenticate
const authenticateToken = (request, response, next) => {
  let jwtToken;
  const authHeader = request.headers["authorization"];
  if (authHeader !== undefined) {
    jwtToken = authHeader.split(" ")[1];
  }
  if (jwtToken === undefined) {
    response.status(401);
    response.send("Invalid JWT Token");
  } else {
    jwt.verify(jwtToken, "GOD_OF_WAR", async (error, payload) => {
      if (error) {
        response.status(401);
        response.send("Invalid JWT Token");
      } else {
        next();
      }
    });
  }
};
//tweet function
const checkTweet = (dbObject) => {
  return {
    username: dbObject.username,
    tweet: dbObject.tweet,
    dateTime: dbObject.date_time,
  };
};
//api-1
app.post("/register/", async (request, response) => {
  const { username, password, name, gender } = request.body;
  const getUsername = `SELECT * FROM user WHERE username = '${username}';`;
  const getUser = await db.get(getUsername);
  const hashedPassword = bcrypt.hash(password, 10);
  if (getUser === undefined) {
    if (password.length < 6) {
      response.status(400);
      response.send("Password is too short");
    } else {
      const postRegQuery = `
        INSERT INTO
          user (username, password, name, gender)
        VALUES
          ('${username}', '${hashedPassword}', '${name}', '${gender}');`;
      await db.run(postRegQuery);
      response.status(200);
      response.send("User created successfully");
    }
  } else {
    response.status(400);
    response.send("User already exists");
  }
});
//api-2
app.post("/login/", authenticateToken, async (request, response) => {
  const { username, password } = request.body;
  const getDetailsOfUser = `SELECT * FROM user WHERE username = '${username}';`;
  const dbUser = await db.get(getDetailsOfUser);
  if (dbUser === undefined) {
    response.status(400);
    response.send("Invalid user");
  } else {
    const isCheckPassword = await bcrypt.compare(password, dbUser.password);
    if (isCheckPassword === true) {
      const payload = { username: username };
      const jwtToken = jwt.sign(payload, "GOD_OF_WAR");
      response.send({ jwtToken });
    } else {
      response.status(400);
      response.send("Invalid password");
    }
  }
});
//api-3
app.get("/user/tweets/feed/", authenticateToken, async (request, response) => {
  const getUserTweets = `
    SELECT
      *
    FROM
      user NATURAL JOIN tweet;`;
  const getUser = await db.all(getUserTweets);
  console.log(getUser);
  response.send(getUser.map((eachInfo) => checkTweet(eachInfo)));
});
